// Code generated by fastssz. DO NOT EDIT.
// Hash: 9527cc4e797778d714a9ae2670811d3f11f93e5065bb337b9ebc3090f63ed8dd
// Version: 0.1.3
package capella

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the LightClientOptimisticUpdate object
func (l *LightClientOptimisticUpdate) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LightClientOptimisticUpdate object to a target array
func (l *LightClientOptimisticUpdate) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(172)

	// Offset (0) 'AttestedHeader'
	dst = ssz.WriteOffset(dst, offset)
	if l.AttestedHeader == nil {
		l.AttestedHeader = new(LightClientHeader)
	}
	offset += l.AttestedHeader.SizeSSZ()

	// Field (1) 'SyncAggregate'
	if l.SyncAggregate == nil {
		l.SyncAggregate = new(altair.SyncAggregate)
	}
	if dst, err = l.SyncAggregate.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'SignatureSlot'
	dst = ssz.MarshalUint64(dst, uint64(l.SignatureSlot))

	// Field (0) 'AttestedHeader'
	if dst, err = l.AttestedHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the LightClientOptimisticUpdate object
func (l *LightClientOptimisticUpdate) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 172 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'AttestedHeader'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 172 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'SyncAggregate'
	if l.SyncAggregate == nil {
		l.SyncAggregate = new(altair.SyncAggregate)
	}
	if err = l.SyncAggregate.UnmarshalSSZ(buf[4:164]); err != nil {
		return err
	}

	// Field (2) 'SignatureSlot'
	l.SignatureSlot = phase0.Slot(ssz.UnmarshallUint64(buf[164:172]))

	// Field (0) 'AttestedHeader'
	{
		buf = tail[o0:]
		if l.AttestedHeader == nil {
			l.AttestedHeader = new(LightClientHeader)
		}
		if err = l.AttestedHeader.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LightClientOptimisticUpdate object
func (l *LightClientOptimisticUpdate) SizeSSZ() (size int) {
	size = 172

	// Field (0) 'AttestedHeader'
	if l.AttestedHeader == nil {
		l.AttestedHeader = new(LightClientHeader)
	}
	size += l.AttestedHeader.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the LightClientOptimisticUpdate object
func (l *LightClientOptimisticUpdate) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LightClientOptimisticUpdate object with a hasher
func (l *LightClientOptimisticUpdate) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'AttestedHeader'
	if err = l.AttestedHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'SyncAggregate'
	if l.SyncAggregate == nil {
		l.SyncAggregate = new(altair.SyncAggregate)
	}
	if err = l.SyncAggregate.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'SignatureSlot'
	hh.PutUint64(uint64(l.SignatureSlot))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LightClientOptimisticUpdate object
func (l *LightClientOptimisticUpdate) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}
