// Code generated by fastssz. DO NOT EDIT.
// Hash: 36f7a983aec09247643abb740889d66d48f8cf220d5190ca0eabba63a6e09169
// Version: 0.1.2
package deneb

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the LightClientHeader object
func (l *LightClientHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LightClientHeader object to a target array
func (l *LightClientHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(136)

	// Offset (0) 'Beacon'
	dst = ssz.WriteOffset(dst, offset)
	if l.Beacon == nil {
		l.Beacon = new(phase0.BeaconBlockHeader)
	}
	offset += l.Beacon.SizeSSZ()

	// Offset (1) 'Execution'
	dst = ssz.WriteOffset(dst, offset)
	if l.Execution == nil {
		l.Execution = new(ExecutionPayloadHeader)
	}
	offset += l.Execution.SizeSSZ()

	// Field (2) 'ExecutionBranch'
	if size := len(l.ExecutionBranch); size != 4 {
		err = ssz.ErrVectorLengthFn("LightClientHeader.ExecutionBranch", size, 4)
		return
	}
	for ii := 0; ii < 4; ii++ {
		if size := len(l.ExecutionBranch[ii]); size != 32 {
			err = ssz.ErrBytesLengthFn("LightClientHeader.ExecutionBranch[ii]", size, 32)
			return
		}
		dst = append(dst, l.ExecutionBranch[ii]...)
	}

	// Field (0) 'Beacon'
	if dst, err = l.Beacon.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Execution'
	if dst, err = l.Execution.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the LightClientHeader object
func (l *LightClientHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 136 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'Beacon'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 136 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Execution'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'ExecutionBranch'
	l.ExecutionBranch = make([][]byte, 4)
	for ii := 0; ii < 4; ii++ {
		if cap(l.ExecutionBranch[ii]) == 0 {
			l.ExecutionBranch[ii] = make([]byte, 0, len(buf[8:136][ii*32:(ii+1)*32]))
		}
		l.ExecutionBranch[ii] = append(l.ExecutionBranch[ii], buf[8:136][ii*32:(ii+1)*32]...)
	}

	// Field (0) 'Beacon'
	{
		buf = tail[o0:o1]
		if l.Beacon == nil {
			l.Beacon = new(phase0.BeaconBlockHeader)
		}
		if err = l.Beacon.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'Execution'
	{
		buf = tail[o1:]
		if l.Execution == nil {
			l.Execution = new(ExecutionPayloadHeader)
		}
		if err = l.Execution.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LightClientHeader object
func (l *LightClientHeader) SizeSSZ() (size int) {
	size = 136

	// Field (0) 'Beacon'
	if l.Beacon == nil {
		l.Beacon = new(phase0.BeaconBlockHeader)
	}
	size += l.Beacon.SizeSSZ()

	// Field (1) 'Execution'
	if l.Execution == nil {
		l.Execution = new(ExecutionPayloadHeader)
	}
	size += l.Execution.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the LightClientHeader object
func (l *LightClientHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LightClientHeader object with a hasher
func (l *LightClientHeader) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Beacon'
	if err = l.Beacon.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Execution'
	if err = l.Execution.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'ExecutionBranch'
	{
		if size := len(l.ExecutionBranch); size != 4 {
			err = ssz.ErrVectorLengthFn("LightClientHeader.ExecutionBranch", size, 4)
			return
		}
		subIndx := hh.Index()
		for _, i := range l.ExecutionBranch {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LightClientHeader object
func (l *LightClientHeader) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}
