// Code generated by fastssz. DO NOT EDIT.
// Hash: 22bc521d8aad1a5ad540019d5cfd3d3cf6ec48a9deb82bc7b39d305ef78ea865
// Version: 0.1.2
package altair

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the LightClientUpdate object
func (l *LightClientUpdate) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the LightClientUpdate object to a target array
func (l *LightClientUpdate) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(376)

	// Offset (0) 'AttestedHeader'
	dst = ssz.WriteOffset(dst, offset)
	if l.AttestedHeader == nil {
		l.AttestedHeader = new(LightClientHeader)
	}
	offset += l.AttestedHeader.SizeSSZ()

	// Offset (1) 'NextSyncCommittee'
	dst = ssz.WriteOffset(dst, offset)
	if l.NextSyncCommittee == nil {
		l.NextSyncCommittee = new(SyncCommittee)
	}
	offset += l.NextSyncCommittee.SizeSSZ()

	// Field (2) 'NextSyncCommitteeBranch'
	if size := len(l.NextSyncCommitteeBranch); size != 5 {
		err = ssz.ErrVectorLengthFn("LightClientUpdate.NextSyncCommitteeBranch", size, 5)
		return
	}
	for ii := 0; ii < 5; ii++ {
		if size := len(l.NextSyncCommitteeBranch[ii]); size != 32 {
			err = ssz.ErrBytesLengthFn("LightClientUpdate.NextSyncCommitteeBranch[ii]", size, 32)
			return
		}
		dst = append(dst, l.NextSyncCommitteeBranch[ii]...)
	}

	// Offset (3) 'FinalizedHeader'
	dst = ssz.WriteOffset(dst, offset)
	if l.FinalizedHeader == nil {
		l.FinalizedHeader = new(LightClientHeader)
	}
	offset += l.FinalizedHeader.SizeSSZ()

	// Field (4) 'FinalityBranch'
	if size := len(l.FinalityBranch); size != 6 {
		err = ssz.ErrVectorLengthFn("LightClientUpdate.FinalityBranch", size, 6)
		return
	}
	for ii := 0; ii < 6; ii++ {
		if size := len(l.FinalityBranch[ii]); size != 32 {
			err = ssz.ErrBytesLengthFn("LightClientUpdate.FinalityBranch[ii]", size, 32)
			return
		}
		dst = append(dst, l.FinalityBranch[ii]...)
	}

	// Offset (5) 'SyncAggregate'
	dst = ssz.WriteOffset(dst, offset)
	if l.SyncAggregate == nil {
		l.SyncAggregate = new(SyncAggregate)
	}
	offset += l.SyncAggregate.SizeSSZ()

	// Field (6) 'SignatureSlot'
	dst = ssz.MarshalUint64(dst, uint64(l.SignatureSlot))

	// Field (0) 'AttestedHeader'
	if dst, err = l.AttestedHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'NextSyncCommittee'
	if dst, err = l.NextSyncCommittee.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'FinalizedHeader'
	if dst, err = l.FinalizedHeader.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'SyncAggregate'
	if dst, err = l.SyncAggregate.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the LightClientUpdate object
func (l *LightClientUpdate) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 376 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o3, o5 uint64

	// Offset (0) 'AttestedHeader'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 376 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'NextSyncCommittee'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'NextSyncCommitteeBranch'
	l.NextSyncCommitteeBranch = make([][]byte, 5)
	for ii := 0; ii < 5; ii++ {
		if cap(l.NextSyncCommitteeBranch[ii]) == 0 {
			l.NextSyncCommitteeBranch[ii] = make([]byte, 0, len(buf[8:168][ii*32:(ii+1)*32]))
		}
		l.NextSyncCommitteeBranch[ii] = append(l.NextSyncCommitteeBranch[ii], buf[8:168][ii*32:(ii+1)*32]...)
	}

	// Offset (3) 'FinalizedHeader'
	if o3 = ssz.ReadOffset(buf[168:172]); o3 > size || o1 > o3 {
		return ssz.ErrOffset
	}

	// Field (4) 'FinalityBranch'
	l.FinalityBranch = make([][]byte, 6)
	for ii := 0; ii < 6; ii++ {
		if cap(l.FinalityBranch[ii]) == 0 {
			l.FinalityBranch[ii] = make([]byte, 0, len(buf[172:364][ii*32:(ii+1)*32]))
		}
		l.FinalityBranch[ii] = append(l.FinalityBranch[ii], buf[172:364][ii*32:(ii+1)*32]...)
	}

	// Offset (5) 'SyncAggregate'
	if o5 = ssz.ReadOffset(buf[364:368]); o5 > size || o3 > o5 {
		return ssz.ErrOffset
	}

	// Field (6) 'SignatureSlot'
	l.SignatureSlot = phase0.Slot(ssz.UnmarshallUint64(buf[368:376]))

	// Field (0) 'AttestedHeader'
	{
		buf = tail[o0:o1]
		if l.AttestedHeader == nil {
			l.AttestedHeader = new(LightClientHeader)
		}
		if err = l.AttestedHeader.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (1) 'NextSyncCommittee'
	{
		buf = tail[o1:o3]
		if l.NextSyncCommittee == nil {
			l.NextSyncCommittee = new(SyncCommittee)
		}
		if err = l.NextSyncCommittee.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (3) 'FinalizedHeader'
	{
		buf = tail[o3:o5]
		if l.FinalizedHeader == nil {
			l.FinalizedHeader = new(LightClientHeader)
		}
		if err = l.FinalizedHeader.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (5) 'SyncAggregate'
	{
		buf = tail[o5:]
		if l.SyncAggregate == nil {
			l.SyncAggregate = new(SyncAggregate)
		}
		if err = l.SyncAggregate.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the LightClientUpdate object
func (l *LightClientUpdate) SizeSSZ() (size int) {
	size = 376

	// Field (0) 'AttestedHeader'
	if l.AttestedHeader == nil {
		l.AttestedHeader = new(LightClientHeader)
	}
	size += l.AttestedHeader.SizeSSZ()

	// Field (1) 'NextSyncCommittee'
	if l.NextSyncCommittee == nil {
		l.NextSyncCommittee = new(SyncCommittee)
	}
	size += l.NextSyncCommittee.SizeSSZ()

	// Field (3) 'FinalizedHeader'
	if l.FinalizedHeader == nil {
		l.FinalizedHeader = new(LightClientHeader)
	}
	size += l.FinalizedHeader.SizeSSZ()

	// Field (5) 'SyncAggregate'
	if l.SyncAggregate == nil {
		l.SyncAggregate = new(SyncAggregate)
	}
	size += l.SyncAggregate.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the LightClientUpdate object
func (l *LightClientUpdate) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the LightClientUpdate object with a hasher
func (l *LightClientUpdate) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'AttestedHeader'
	if err = l.AttestedHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'NextSyncCommittee'
	if err = l.NextSyncCommittee.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'NextSyncCommitteeBranch'
	{
		if size := len(l.NextSyncCommitteeBranch); size != 5 {
			err = ssz.ErrVectorLengthFn("LightClientUpdate.NextSyncCommitteeBranch", size, 5)
			return
		}
		subIndx := hh.Index()
		for _, i := range l.NextSyncCommitteeBranch {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		hh.Merkleize(subIndx)
	}

	// Field (3) 'FinalizedHeader'
	if err = l.FinalizedHeader.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'FinalityBranch'
	{
		if size := len(l.FinalityBranch); size != 6 {
			err = ssz.ErrVectorLengthFn("LightClientUpdate.FinalityBranch", size, 6)
			return
		}
		subIndx := hh.Index()
		for _, i := range l.FinalityBranch {
			if len(i) != 32 {
				err = ssz.ErrBytesLength
				return
			}
			hh.Append(i)
		}
		hh.Merkleize(subIndx)
	}

	// Field (5) 'SyncAggregate'
	if err = l.SyncAggregate.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (6) 'SignatureSlot'
	hh.PutUint64(uint64(l.SignatureSlot))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the LightClientUpdate object
func (l *LightClientUpdate) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}
